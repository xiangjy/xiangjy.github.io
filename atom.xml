<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xiangjy&#39;s Blog</title>
  
  <subtitle>Good Good Study, Day Day Up</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://localhost:4000/"/>
  <updated>2018-09-04T05:45:28.656Z</updated>
  <id>http://localhost:4000/</id>
  
  <author>
    <name>Xiangjy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>data structures &amp; algorithms</title>
    <link href="http://localhost:4000/2018/09/04/data-structures&amp;algorithms/"/>
    <id>http://localhost:4000/2018/09/04/data-structures&amp;algorithms/</id>
    <published>2018-09-04T05:44:00.000Z</published>
    <updated>2018-09-04T05:45:28.656Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="算法" scheme="http://localhost:4000/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://localhost:4000/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Nginx进行泛域名解析</title>
    <link href="http://localhost:4000/2018/02/07/nginx-pan-domain-name/"/>
    <id>http://localhost:4000/2018/02/07/nginx-pan-domain-name/</id>
    <published>2018-02-07T09:55:52.000Z</published>
    <updated>2018-02-08T02:15:21.960Z</updated>
    
    <content type="html"><![CDATA[<h3 id="主要实现："><a href="#主要实现：" class="headerlink" title="主要实现："></a>主要实现：</h3><pre><code>xxx.domain2.domain1.com -&gt; domain2.domain1.com/xxxxxx.domain2.domain1.com -&gt; domain2.domain1.com/?id=xxx</code></pre><p>nginx rewrite实现二级或三级域名泛解析<br>在nginx的相对应的配置文件的server中添加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($host ~* ^([^\.]+)\.([^\.]+)\.([^\.]+)\.([^\.]+)$) &#123;  <span class="comment">#三级域名</span></span><br><span class="line">    set $subdomain $<span class="number">1</span>;</span><br><span class="line">    set $domain $<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123; <span class="comment">#添加rewrite</span></span><br><span class="line">    rewrite ^/(.*)$ /index.html/$<span class="number">1</span>$subdomain last;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;主要实现：&quot;&gt;&lt;a href=&quot;#主要实现：&quot; class=&quot;headerlink&quot; title=&quot;主要实现：&quot;&gt;&lt;/a&gt;主要实现：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;xxx.domain2.domain1.com -&amp;gt; domain2.domain1.com/
      
    
    </summary>
    
    
      <category term="nginx" scheme="http://localhost:4000/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>algorithm</title>
    <link href="http://localhost:4000/2017/09/19/algorithm/"/>
    <id>http://localhost:4000/2017/09/19/algorithm/</id>
    <published>2017-09-19T07:42:24.000Z</published>
    <updated>2017-09-19T07:42:56.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>将后面的元素插入前面已经排序好的序列中<br>循环每一个元素<br>从第二个元素开始循环，逆序与前面每一个元素比较(默认前面元素已经是排序好的)，如果小于则交换<br>[8, 7, 6, 5, 4, 3, 2, 1]<br>先选出7，逆序循环与前面排序好的[8]比较，小于交换<br>[7, 8, 6, 5, 4, 3, 2, 1]<br>选出6，逆序循环与前面排序好的[7,8]比较，小于交换<br>[7, 6, 8, 5, 4, 3, 2, 1]<br>[6, 7, 8, 5, 4, 3, 2, 1]<br>一次类推</p><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>根据序列长度分组后，对每个组进行插入排序<br>循环对数组分组，分完的组进行插入排序<br>[8, 7, 6, 5, 4, 3, 2, 1]<br>根据长度分组len(L)/2 = 4, gap = 4<br>[L[0], L[0 + 4]], [L[1], L[1 + 4]…<br>[8, 4], [7, 3], [6, 2], [5, 1] -&gt; [4, 8], [3, 7], [2, 6], [1, 5]<br>[4,3,2,1,8,7,6,5]<br>gap /= 2<br>[L[0], L[0 + 2], L[0 + 4], L[0 + 6]]…<br>[4, 2, 8, 6] [3, 1, 7, 5] -&gt; [2, 4, 6, 8] [1, 3, 5, 7]<br>gap /= 2<br>[2, 1, 4, 3, 6, 5, 8, 7]<br>gap /= 2<br>[2, 1, 4, 3, 6, 5, 8, 7] -&gt; [1, 2, 3, 4, 5, 6, 7, 8]</p><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>选择待排序子序列中最小值，最小值换到第一位置<br>[8, 7, 6, 5, 4, 3, 2, 1]<br>[1, 7, 6, 5, 4, 3, 2, 8]<br>[1, 2, 6, 5, 4, 3, 7, 8]<br>[1, 2, 3, 5, 4, 6, 7, 8]…</p><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>从第一个元素比较，将大的元素往后面移<br>[8, 7, 6, 5, 4, 3, 2, 1]<br>[7, 8, 6, 5, 4, 3, 2, 1]…<br>[7, 6, 5, 4, 3, 2, 1, 8]…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;插入排序&quot;&gt;&lt;a href=&quot;#插入排序&quot; class=&quot;headerlink&quot; title=&quot;插入排序&quot;&gt;&lt;/a&gt;插入排序&lt;/h4&gt;&lt;p&gt;将后面的元素插入前面已经排序好的序列中&lt;br&gt;循环每一个元素&lt;br&gt;从第二个元素开始循环，逆序与前面每一个元素比较(默认前面
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>scrapy</title>
    <link href="http://localhost:4000/2017/09/12/scrapy/"/>
    <id>http://localhost:4000/2017/09/12/scrapy/</id>
    <published>2017-09-12T02:10:38.000Z</published>
    <updated>2017-09-12T02:10:38.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>pypi私有服务器</title>
    <link href="http://localhost:4000/2017/09/08/pypi-server/"/>
    <id>http://localhost:4000/2017/09/08/pypi-server/</id>
    <published>2017-09-08T10:57:18.000Z</published>
    <updated>2017-09-10T15:02:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pypi-server搭建"><a href="#pypi-server搭建" class="headerlink" title="pypi-server搭建"></a>pypi-server搭建</h2><h3 id="pypi官方说明"><a href="#pypi官方说明" class="headerlink" title="pypi官方说明"></a><a href="http://wiki.python.org/moin/PyPiImplementations" target="_blank" rel="noopener">pypi官方说明</a></h3><h3 id="1-基础安装和启动"><a href="#1-基础安装和启动" class="headerlink" title="1.基础安装和启动"></a>1.基础安装和启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ pip install pypiserver</span><br><span class="line">$ mkdir ~/pypi/packages</span><br><span class="line"># copy some source packages or eggs to this directory</span><br><span class="line">$ pypi-server -p 3141 ~/pypi/packages</span><br><span class="line">$ pip install -i http://localhost:8001/simple/ ...</span><br></pre></td></tr></table></figure><h3 id="2-添加上传密码"><a href="#2-添加上传密码" class="headerlink" title="2.添加上传密码"></a>2.添加上传密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pip install passlib</span><br><span class="line">$ apt-get install apache2-utils     # Mac OS不用安装</span><br><span class="line">$ htpasswd -sc ~/pypi/.htaccess user   # 回车后会提示输入密码，输入123</span><br></pre></td></tr></table></figure><h3 id="3-启动pypi-server时加载密钥文件"><a href="#3-启动pypi-server时加载密钥文件" class="headerlink" title="3.启动pypi server时加载密钥文件"></a>3.启动pypi server时加载密钥文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pypi-server -p 3141 -P ~/pypi/.htaccess ./packages</span><br></pre></td></tr></table></figure><h3 id="4-在用户根目录下创建-pypirc文件"><a href="#4-在用户根目录下创建-pypirc文件" class="headerlink" title="4.在用户根目录下创建.pypirc文件"></a>4.在用户根目录下创建.pypirc文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[distutils]</span><br><span class="line">index-servers =</span><br><span class="line">  privatepypi</span><br><span class="line"></span><br><span class="line">[privatepypi]</span><br><span class="line">repository:http://127.0.0.1:3141</span><br><span class="line">username:user</span><br><span class="line">password:123</span><br></pre></td></tr></table></figure><h3 id="5-上传package"><a href="#5-上传package" class="headerlink" title="5.上传package"></a>5.上传package</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py sdist upload -r privatepypi</span><br></pre></td></tr></table></figure><h3 id="6-下载package"><a href="#6-下载package" class="headerlink" title="6.下载package"></a>6.下载package</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install -i http://localhost:3134/simple/ package-name</span><br></pre></td></tr></table></figure><h3 id="7-setup-py文件示例"><a href="#7-setup-py文件示例" class="headerlink" title="7.setup.py文件示例"></a>7.setup.py文件示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import importlib</span><br><span class="line">from setuptools import setup, find_packages</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PROJECT = &apos;libs&apos;</span><br><span class="line">requires = []</span><br><span class="line"># 读取requirements.txt文件，获得需要安装基础包</span><br><span class="line">with open(&apos;requirements.txt&apos;) as f:</span><br><span class="line">    for line in f.readlines():</span><br><span class="line">        requires.append(line.strip())</span><br><span class="line"></span><br><span class="line"># 打包时替换version.py文件</span><br><span class="line">if sys.argv[1] == &apos;sdist&apos;:</span><br><span class="line">    version_py = importlib.import_module(&apos;&#123;project&#125;.version&apos;.format(project=PROJECT))</span><br><span class="line">    version_py.update_version_file(&apos;&#123;project&#125;/version.py&apos;.format(project=PROJECT))</span><br><span class="line"># reload version模块，确保在替换version.py文件后获得最新的version号</span><br><span class="line">version = reload(importlib.import_module(&apos;&#123;pro&#125;.version&apos;.format(pro=PROJECT))).get_version()</span><br><span class="line"></span><br><span class="line">with open(&apos;README.md&apos;, &apos;r&apos;) as f:</span><br><span class="line">    readme = f.read()</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=&apos;libs&apos;,</span><br><span class="line">    version=version,</span><br><span class="line">    description=&apos;libs is the common lib for Django project&apos;,</span><br><span class="line">    long_description=readme,</span><br><span class="line">    author=&apos;xxx&apos;,</span><br><span class="line">    author_email=&apos;xxx@gmail.com&apos;,</span><br><span class="line">    url=&apos;&apos;,</span><br><span class="line">    packages=find_packages(),</span><br><span class="line">    include_package_data=True,</span><br><span class="line">    install_requires=requires,</span><br><span class="line">    test_suite=&apos;nose.collector&apos;,</span><br><span class="line">    license=&apos;All rights reserved by xxx.&apos;,</span><br><span class="line">    zip_safe=False,</span><br><span class="line">    classifiers=(</span><br><span class="line">        &apos;Development Status :: 5 - Production/Stable&apos;,</span><br><span class="line">        &apos;Intended Audience :: Developers&apos;,</span><br><span class="line">        &apos;Natural Language :: English&apos;,</span><br><span class="line">        &apos;Programming Language :: Python&apos;,</span><br><span class="line">        &apos;Programming Language :: Python :: 2.7&apos;,</span><br><span class="line">    ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="setup-py官方文档"><a href="#setup-py官方文档" class="headerlink" title="setup.py官方文档"></a><a href="https://docs.python.org/2/distutils/setupscript.html" target="_blank" rel="noopener">setup.py官方文档</a></h3><h2 id="使用supervisor管理pypi-server"><a href="#使用supervisor管理pypi-server" class="headerlink" title="使用supervisor管理pypi-server"></a>使用supervisor管理pypi-server</h2><h3 id="1-生成run-pypi-sh文件，supervisor执行命令文件"><a href="#1-生成run-pypi-sh文件，supervisor执行命令文件" class="headerlink" title="1.生成run-pypi.sh文件，supervisor执行命令文件"></a>1.生成run-pypi.sh文件，supervisor执行命令文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"># 启动virtualenv</span><br><span class="line">. ~/pypi/pypienv/bin/activate</span><br><span class="line">exec pypi-server -p 3141 ~/pypi/packages</span><br></pre></td></tr></table></figure><h3 id="2-生成supervisor配置文件，-etc-supervisor-conf-d-pypi-server-conf"><a href="#2-生成supervisor配置文件，-etc-supervisor-conf-d-pypi-server-conf" class="headerlink" title="2.生成supervisor配置文件，/etc/supervisor/conf.d/pypi-server.conf"></a>2.生成supervisor配置文件，/etc/supervisor/conf.d/pypi-server.conf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[program:pypi-server]</span><br><span class="line">  directory=~/pypi/</span><br><span class="line">  command=sh run-pypi.sh</span><br><span class="line">  autostart=true</span><br><span class="line">  autorestart=true</span><br><span class="line">  redirect_stderr=true</span><br></pre></td></tr></table></figure><h3 id="3-启动和停止supervisor"><a href="#3-启动和停止supervisor" class="headerlink" title="3.启动和停止supervisor"></a>3.启动和停止supervisor</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/supervisor start</span><br><span class="line">$ sudo /etc/init.d/supervisor stop</span><br></pre></td></tr></table></figure><h2 id="公有云pypi"><a href="#公有云pypi" class="headerlink" title="公有云pypi"></a>公有云pypi</h2><h3 id="1-将包的相关信息-根据PyPI账户的注册信息-在PyPI主页上注册。"><a href="#1-将包的相关信息-根据PyPI账户的注册信息-在PyPI主页上注册。" class="headerlink" title="1.将包的相关信息, 根据PyPI账户的注册信息, 在PyPI主页上注册。"></a>1.将包的相关信息, 根据PyPI账户的注册信息, 在PyPI主页上注册。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python setup.py register -r pypi</span><br></pre></td></tr></table></figure><h3 id="2-将包的源代码内容打包上传。"><a href="#2-将包的源代码内容打包上传。" class="headerlink" title="2.将包的源代码内容打包上传。"></a>2.将包的源代码内容打包上传。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python setup.py sdist upload -r pypi</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;pypi-server搭建&quot;&gt;&lt;a href=&quot;#pypi-server搭建&quot; class=&quot;headerlink&quot; title=&quot;pypi-server搭建&quot;&gt;&lt;/a&gt;pypi-server搭建&lt;/h2&gt;&lt;h3 id=&quot;pypi官方说明&quot;&gt;&lt;a href=&quot;#p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>gitlib-runner</title>
    <link href="http://localhost:4000/2017/09/08/gitlib-runner/"/>
    <id>http://localhost:4000/2017/09/08/gitlib-runner/</id>
    <published>2017-09-08T09:26:17.000Z</published>
    <updated>2017-09-08T10:55:29.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-使用docker运行gitlab-runner"><a href="#1-使用docker运行gitlab-runner" class="headerlink" title="1.使用docker运行gitlab-runner"></a>1.使用docker运行gitlab-runner</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gitlab-runner:</span><br><span class="line">    container_name: gitlab-runner</span><br><span class="line">    image: gitlab/gitlab-runner:latest</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">        - /etc/localtime:/etc/localtime</span><br><span class="line">        - /home/data/docker/gitlab-runner/home/.pypirc:/root/.pypirc</span><br><span class="line">        - /var/run/docker.sock:/var/run/docker.sock</span><br><span class="line">        - /home/data/docker/gitlab-runner/config:/etc/gitlab-runner</span><br><span class="line">    command: [run, --working-directory=/home/gitlab-runner]</span><br><span class="line">    dns:</span><br><span class="line">        - 192.168.0.100</span><br></pre></td></tr></table></figure><h3 id="2-进入docker"><a href="#2-进入docker" class="headerlink" title="2.进入docker"></a>2.进入docker</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -it gitlab-runner bash</span><br></pre></td></tr></table></figure><h3 id="3-执行gitlab-runner或gitlab-ci-multi-runner-reigster"><a href="#3-执行gitlab-runner或gitlab-ci-multi-runner-reigster" class="headerlink" title="3.执行gitlab-runner或gitlab-ci-multi-runner reigster"></a>3.执行gitlab-runner或gitlab-ci-multi-runner reigster</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ sudo gitlab-runner register</span><br><span class="line"></span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )</span><br><span class="line">## 输入gitlab地址</span><br><span class="line">Please enter the gitlab-ci token for this runner</span><br><span class="line">## gitlab的token(在gitlab的Admin Area中) 或者仓库的token(仓库-&gt;设置-&gt;Runner)</span><br><span class="line">Please enter the gitlab-ci description for this runner</span><br><span class="line">## Runner描述信息</span><br><span class="line">Please enter the gitlab-ci tags for this runner (comma separated):</span><br><span class="line">## Runner的标签 可以指定仓库，之后在.gitlab-ci.yml中配置相对应tags </span><br><span class="line">Please enter the executor: parallels, shell, ssh, virtualbox, docker+machine, docker-ssh+machine, docker, docker-ssh, kubernetes:</span><br><span class="line">docker  ## 执行类型 </span><br><span class="line">Please enter the Docker image (eg. ruby:2.1):</span><br><span class="line">build-image  ## 编译环境的镜像</span><br><span class="line">Runner registered successfully. Feel free to start it, but if it&apos;s running already the config should be automatically reloaded!</span><br></pre></td></tr></table></figure><p>注册runner执行类型有多种方式，具体参考：<a href="https://docs.gitlab.com/ce/ci/docker/using_docker_build.html" target="_blank" rel="noopener">Using Docker Build</a></p><h3 id="4-查看已经注册的runner"><a href="#4-查看已经注册的runner" class="headerlink" title="4.查看已经注册的runner"></a>4.查看已经注册的runner</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-runner list</span><br><span class="line">Listing configured runners                          ConfigFile=/mypath/.gitlab-runner/config.toml</span><br></pre></td></tr></table></figure><h3 id="5-配置-gitlab-ci-yml"><a href="#5-配置-gitlab-ci-yml" class="headerlink" title="5.配置.gitlab-ci.yml"></a>5.配置.gitlab-ci.yml</h3><p>详情参考：<a href="https://docs.gitlab.com/ce/ci/yaml/README.html" target="_blank" rel="noopener">gitlab-ci说明文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-使用docker运行gitlab-runner&quot;&gt;&lt;a href=&quot;#1-使用docker运行gitlab-runner&quot; class=&quot;headerlink&quot; title=&quot;1.使用docker运行gitlab-runner&quot;&gt;&lt;/a&gt;1.使用docker运
      
    
    </summary>
    
    
      <category term="持续集成" scheme="http://localhost:4000/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>Python实现斐波那契</title>
    <link href="http://localhost:4000/2017/08/21/fibonacci/"/>
    <id>http://localhost:4000/2017/08/21/fibonacci/</id>
    <published>2017-08-21T10:41:40.000Z</published>
    <updated>2017-09-10T15:07:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>斐波那契数列(Fibonacci sequence)，又称黄金分割数列，也称为”兔子数列”：<br>F(0)=0,F(1)=1,F(n)=F(n-1)+F(n-2) （n $\ge$ 2, n $\in$ N*)。例如 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233，377，610，987，1597，2584，4181，6765，10946，17711，28657，46368……..这个数列从第3项开始，每一项都等于前两项之和，而且当n趋向于无穷大时，前一项与后一项的比值越来越逼近黄金分割比例0.618。  </p><p>不同方法实现斐波那契：   </p><h3 id="普通循环"><a href="#普通循环" class="headerlink" title="普通循环"></a>普通循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env python</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">    <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><h3 id="递归版本"><a href="#递归版本" class="headerlink" title="递归版本"></a>递归版本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env python</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> == n:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="number">1</span> == n:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="迭代器版本"><a href="#迭代器版本" class="headerlink" title="迭代器版本"></a>迭代器版本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fib</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        self.a = <span class="number">0</span></span><br><span class="line">        self.b = <span class="number">1</span></span><br><span class="line">        self.n = n</span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        result = self.a</span><br><span class="line">        self.a, self.b = self.b, self.a + self.b</span><br><span class="line">        <span class="keyword">if</span> self.count &gt; self.n:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        self.count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;斐波那契数列(Fibonacci sequence)，又称黄金分割数列，也称为”兔子数列”：&lt;br&gt;F(0)=0,F(1)=1,F(n)=F(n-1)+F(n-2) （n $\ge$ 2, n $\in$ N*)。例如 1, 1, 2, 3, 5, 8, 13, 21, 3
      
    
    </summary>
    
    
      <category term="算法" scheme="http://localhost:4000/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="python" scheme="http://localhost:4000/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>gitlab</title>
    <link href="http://localhost:4000/2017/08/21/gitlab-ci-and-runner/"/>
    <id>http://localhost:4000/2017/08/21/gitlab-ci-and-runner/</id>
    <published>2017-08-21T00:58:06.000Z</published>
    <updated>2017-08-21T00:58:06.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="http://localhost:4000/2017/08/18/docker/"/>
    <id>http://localhost:4000/2017/08/18/docker/</id>
    <published>2017-08-18T10:33:11.000Z</published>
    <updated>2017-08-18T10:33:11.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python内置方法的时间复杂度</title>
    <link href="http://localhost:4000/2017/08/16/python-time-complexity/"/>
    <id>http://localhost:4000/2017/08/16/python-time-complexity/</id>
    <published>2017-08-16T01:38:35.000Z</published>
    <updated>2017-08-18T02:43:59.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="列表-list"><a href="#列表-list" class="headerlink" title="列表(list)"></a>列表(list)</h4><p>以完全随机的列表考虑平均情况。<br>列表是以数组(Array)实现的。最大的开销发生在超过当前分配大小的增长，这种情况下所有元素都需要移动；或者是在起始位置附近插入或者删除元素，这种情况下所有在该位置后面的元素都需要移动。如果你需要在一个队列的两端进行增删的操作，应当使用collections.deque(双向队列)</p><table><thead><tr><th>操作</th><th>平均情况</th><th>最坏情况</th></tr></thead><tbody><tr><td>复制</td><td>O(n)</td><td>O(n)</td></tr><tr><td>append</td><td>O(1)</td><td>O(1)</td></tr><tr><td>插入</td><td>O(1)</td><td>O(n)</td></tr><tr><td>取元素</td><td>O(1)</td><td>O(1)</td></tr><tr><td>更改元素</td><td>O(1)</td><td>O(1)</td></tr><tr><td>输出元素</td><td>O(n)</td><td>O(n)</td></tr><tr><td>遍历</td><td>O(n)</td><td>O(n)</td></tr><tr><td>取切片</td><td>O(k)</td><td>O(k)</td></tr><tr><td>删除切片</td><td>O(n)</td><td>O(n)</td></tr><tr><td>更改切片</td><td>O(k+n)</td><td>O(k+n)</td></tr><tr><td>extend</td><td>O(k)</td><td>O(k)</td></tr><tr><td>排序</td><td>O(n log n)</td><td>O(n log n)</td></tr><tr><td>列表乘法</td><td>O(nk)</td><td>O(nk)</td></tr><tr><td>x in s</td><td>O(n)</td><td></td></tr><tr><td>min(s),max(s)</td><td>O(n)</td><td></td></tr><tr><td>长度计算</td><td>O(1)</td><td>O(1)</td></tr></tbody></table><h4 id="双向队列-collections-deque"><a href="#双向队列-collections-deque" class="headerlink" title="双向队列(collections.deque)"></a>双向队列(collections.deque)</h4><p>deque(double-ended queue，双向队列)是以双向链表的形式实现的(Well,a list of arrays rather than objects,for greater efficiency)。双向队列的两端都是可达的，但从查找队列中间的元素较为缓慢，增删元素就更慢了。</p><table><thead><tr><th>操作</th><th>平均情况</th><th>最坏情况</th></tr></thead><tbody><tr><td>复制</td><td>O(n)</td><td>O(n)</td></tr><tr><td>append</td><td>O(1)</td><td>O(1)</td></tr><tr><td>appendleft</td><td>O(1)</td><td>O(n)</td></tr><tr><td>pop</td><td>O(1)</td><td>O(1)</td></tr><tr><td>popleft</td><td>O(1)</td><td>O(1)</td></tr><tr><td>extend</td><td>O(k)</td><td>O(k)</td></tr><tr><td>extendleft</td><td>O(k)</td><td>O(k)</td></tr><tr><td>rotate</td><td>O(k)</td><td>O(k)</td></tr><tr><td>remove</td><td>O(n)</td><td>O(n)</td></tr></tbody></table><h4 id="集合-set"><a href="#集合-set" class="headerlink" title="集合(set)"></a>集合(set)</h4><p>未列出的操作可参考dict——二者的实现非常相似。</p><table><thead><tr><th>操作</th><th>平均情况</th><th>最坏情况</th></tr></thead><tbody><tr><td>x in s</td><td>O(1)</td><td>O(n)</td></tr><tr><td>并集s&#124;t</td><td>O(len(s)+len(t))</td><td></td></tr><tr><td>交集s&amp;t</td><td>O(min(len(s), len(t)))</td><td>O(len(s)*len(t))</td></tr><tr><td>差集s-t</td><td>O(len(s))</td><td></td></tr><tr><td>s.difference_update(t)</td><td>O(len(t))</td><td></td></tr><tr><td>对称差集s^t</td><td>O(len(s))</td><td>O(len(s)*len(t))</td></tr><tr><td>s.symmetric_difference_update(t)</td><td>O(len(t))</td><td>O(len(t)*len(s))</td></tr></tbody></table><p>由源码得知，求差集(s-t，或s.difference(t))运算与更新为差集(s.difference_update(t))运算的时间复杂度并不相同！前者是将在s中，但不在t中的元素添加到新的集合中，因此时间复杂度为O(len(s))；后者是将在t中的元素从s中移除，因此时间复杂度为O(len(t)。因此，使用时请留心，根据两个集合的大小以及是否需要新集合来选择合适的方法。<br>集合的s-t运算中，并不要求t也一定是集合。只要t是可遍历的对象即可。</p><h4 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典(dict)"></a>字典(dict)</h4><p>下列字典的平均情况基于以下假设：<br>1.对象的散列函数足够撸棒(robust)，不会发生冲突。<br>2.字典的键是从所有可能的键的集合中随机选择的。<br>只使用字符串最为字典的键。这么做虽然不会影响算法的时间复杂度，但会对常数项产生显著的影响，这决定了你的一段程序能对快跑完。</p><table><thead><tr><th>操作</th><th>平均情况</th><th>最坏情况</th></tr></thead><tbody><tr><td>复制</td><td>O(n)</td><td>O(n)</td></tr><tr><td>取元素</td><td>O(1)</td><td>O(n)</td></tr><tr><td>更改元素</td><td>O(1)</td><td>O(n)</td></tr><tr><td>删除元素</td><td>O(1)</td><td>O(n)</td></tr><tr><td>遍历</td><td>O(n)</td><td>O(n)</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;列表-list&quot;&gt;&lt;a href=&quot;#列表-list&quot; class=&quot;headerlink&quot; title=&quot;列表(list)&quot;&gt;&lt;/a&gt;列表(list)&lt;/h4&gt;&lt;p&gt;以完全随机的列表考虑平均情况。&lt;br&gt;列表是以数组(Array)实现的。最大的开销发生在超过当前
      
    
    </summary>
    
    
      <category term="算法" scheme="http://localhost:4000/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="python" scheme="http://localhost:4000/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>支持向量机(SVM)</title>
    <link href="http://localhost:4000/2017/08/15/svm/"/>
    <id>http://localhost:4000/2017/08/15/svm/</id>
    <published>2017-08-15T03:55:14.000Z</published>
    <updated>2017-08-15T04:08:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>什么是支持向量机(SVM)<br>1、支持向量机(Support Vector Machine，常简称SVM)是一种监督式学习的方法，可广泛的应用与统计分类以及回归分析。支持向量机属于一般化线性分类器，这种分类器的特点是他们能够同时最小化经验误差与最大化几何边缘区，因此支持向量机也被称为最大边缘区分类器。<br>2、支持向量机将向量映射到一个更高维的空间里，在这个空间里建立有一个最大间隔超平面。在分开数据的超平面两边建有两个互相平行的超平面，分隔超平面使两个平行超平面的距离最大化。假定平行超平面间的距离或差距越大，分类器的总误差越小。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;什么是支持向量机(SVM)&lt;br&gt;1、支持向量机(Support Vector Machine，常简称SVM)是一种监督式学习的方法，可广泛的应用与统计分类以及回归分析。支持向量机属于一般化线性分类器，这种分类器的特点是他们能够同时最小化经验误差与最大化几何边缘区，因此支持
      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://localhost:4000/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="数据挖掘" scheme="http://localhost:4000/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>决策树ID3算法</title>
    <link href="http://localhost:4000/2017/08/14/ID3/"/>
    <id>http://localhost:4000/2017/08/14/ID3/</id>
    <published>2017-08-14T08:12:20.000Z</published>
    <updated>2017-08-18T03:26:56.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="决策树ID3算法和python实现"><a href="#决策树ID3算法和python实现" class="headerlink" title="决策树ID3算法和python实现"></a>决策树ID3算法和python实现</h4><p>决策树是一棵树，其叶子节点决定了该类的归属，其内部节点则根据特征的值对数据进行子树寻找，以决定在哪棵子树上继续该决策过程。<br>选择信息熵增益最大的feature作为node，实现对数据的归纳分类。</p><p>熵：表示随机变量的不确定性。<br>条件熵：在一个条件下，随机变量的不确定性。<br>信息增益：熵 - 条件熵<br>举个栗子：X(明天下雨)是一个随机变量，X的熵可以算出来， Y(明天阴天)也是随机变量，在阴天情况下下雨的信息熵我们如果也知道的话（此处需要知道其联合概率分布或是通过数据估计）即是条件熵。两者相减就是信息增益！原来明天下雨例如信息熵是2，条件熵是0.01（因为如果是阴天就下雨的概率很大，信息就少了），这样相减后为1.99，在获得阴天这个信息后，下雨信息不确定性减少了1.99！是很多的！所以信息增益大！也就是说，阴天这个信息对下雨来说是很重要的！所以在特征选择的时候常常用信息增益，如果IG（信息增益大）的话那么这个特征对于分类来说很关键，决策树就是这样来找特征的！</p><p>信息的定义：待分类的事务可能处于多个分类中，则符号$x_i$的信息定义如下：<br>$$ l(x_i) = -log_2p(x_i) $$</p><p>信息熵公式(计算熵，需要计算所有类别所有可能值包含的信息期望值)：</p><p>$$ H(x) = -sum(p(x)log_2p(x)) $$</p><p>$$ H(X) = -\sum_{i=0}^n p(x_i)log_2p(x_i) $$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;决策树ID3算法和python实现&quot;&gt;&lt;a href=&quot;#决策树ID3算法和python实现&quot; class=&quot;headerlink&quot; title=&quot;决策树ID3算法和python实现&quot;&gt;&lt;/a&gt;决策树ID3算法和python实现&lt;/h4&gt;&lt;p&gt;决策树是一棵树，其叶
      
    
    </summary>
    
    
      <category term="算法" scheme="http://localhost:4000/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="机器学习" scheme="http://localhost:4000/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="python" scheme="http://localhost:4000/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>k邻近算法</title>
    <link href="http://localhost:4000/2017/08/14/knn/"/>
    <id>http://localhost:4000/2017/08/14/knn/</id>
    <published>2017-08-14T04:04:05.000Z</published>
    <updated>2017-08-14T11:08:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><script type="text/javascript" async src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML"></script></p><h4 id="k最邻近算法"><a href="#k最邻近算法" class="headerlink" title="k最邻近算法"></a>k最邻近算法</h4><p>余弦相似度：通过测量两个向量的夹角的余弦值来度量它们之间的相似性。0度角的余弦值是1，而其他任何角度的余弦值都不大于1；并且其最小值是-1.从而两个向量之间的角度的余弦值确定两个向量是否大致指向相同的方向。两个向量有相同的指向时，余弦相似度的值为1；两个向量夹角为90°时，余弦相似度的值为0；两个向量指向完全相反的方向时，余弦相似度的值为-1。这结果是与向量的长度无关的，仅仅与向量的指向方向相关。余弦相似度通常用于正空间，因此给出的值为0到1之间。</p><p>$$cos{\theta}=\frac{a^2+b^2-c^2}{2ab}$$</p><p>$$cos{\theta}=\frac{x_1x_2+y_1y_2}{\sqrt{x_1^2+y_1^2}*\sqrt{x_2^2+y_2^2}}$$</p><p>$$cos{\theta}=\frac{AB}{\vert{A}\vert*\vert{B}\vert}$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;script type=&quot;text/javascript&quot; async src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h4 id
      
    
    </summary>
    
    
      <category term="算法" scheme="http://localhost:4000/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="机器学习" scheme="http://localhost:4000/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="python" scheme="http://localhost:4000/tags/python/"/>
    
  </entry>
  
</feed>
